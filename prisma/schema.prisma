generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         String     @id @default(uuid())
  name       String?
  email      String?    @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  wallets    Wallet[]
  categories Category[]
  events     Event[]
  places     Place[]
  people     Person[]
  debts      Debt[]
}

model Currency {
  iso       String   @id @db.VarChar(3)
  name      String
  symbol    String?
  decimals  Int      @default(2)
  favourite Boolean
  lastEdit  DateTime @updatedAt
  deleted   Boolean  @default(false)
  wallets   Wallet[]
}

model Wallet {
  id                    String                 @id @default(uuid())
  name                  String
  iconResource          String?
  iconColor             String?
  iconName              String?
  currency              Currency               @relation(fields: [currencyIso], references: [iso])
  currencyIso           String
  startMoney            Float?                 @default(0)
  countInTotal          Boolean                @default(true)
  archived              Boolean                @default(false)
  index                 Int                    @default(0)
  lastEdit              DateTime               @updatedAt
  deleted               Boolean                @default(false)
  debts                 Debt[]
  transactions          Transaction[]
  recurrentTransactions RecurrentTransaction[]
  transactionModels     TransactionModel[]
  transferModelsFrom    TransferModel[]        @relation("TransactionModelFromWallet")
  transferModelsTo      TransferModel[]        @relation("TransactionModelToWallet")
  user                  User                   @relation(fields: [userID], references: [id])
  userID                String

  @@index([userID])
}

enum CategoryType {
  INCOME
  EXPENSE
  SYSTEM
}

enum CategoryTag {
  SYSTEM_TRANSFER
  SYSTEM_TRANSFER_TAX
  SYSTEM_DEBT
  SYSTEM_CREDIT
  SYSTEM_PAID_DEBT
  SYSTEM_PAID_CREDIT
  SYSTEM_TAX
  SYSTEM_DEPOSIT
  SYSTEM_WITHDRAW
  DEFAULT_SALE
  DEFAULT_CAR_EXPENSES
  DEFAULT_TECHNOLOGY
  DEFAULT_HOBBY
  DEFAULT_TIP
  DEFAULT_SALARY
  DEFAULT_TRAVEL
}

model Category {
  name          String
  iconResource  String?
  iconColor     String?
  iconName      String?
  type          CategoryType
  parentID      String?
  parent        Category?     @relation("ParentCategory", fields: [parentID], references: [id])
  children      Category[]    @relation("ParentCategory")
  tag           CategoryTag?
  transactions  Transaction[]
  showInReports Boolean       @default(true)
  index         Int           @default(0)
  id            String        @id @default(uuid())
  lastEdit      DateTime      @updatedAt
  deleted       Boolean       @default(false)
  user          User          @relation(fields: [userID], references: [id])
  userID        String

  @@index([userID])
}

model Event {
  name         String
  iconResource String?
  iconColor    String?
  iconName     String?
  note         String?
  startDate    DateTime
  endDate      DateTime
  id           String        @id @default(uuid())
  lastEdit     DateTime      @updatedAt
  deleted      Boolean       @default(false)
  transactions Transaction[]
  user         User          @relation(fields: [userID], references: [id])
  userID       String

  @@index([userID])
}

model Place {
  name         String
  iconResource String?
  iconColor    String?
  iconName     String?
  address      String?
  latitude     String?
  longitude    String?
  id           String        @id @default(uuid())
  lastEdit     DateTime      @updatedAt
  deleted      Boolean       @default(false)
  transactions Transaction[]
  user         User          @relation(fields: [userID], references: [id])
  userID       String

  @@index([userID])
}

model Person {
  name         String
  iconResource String?
  iconColor    String?
  iconName     String?
  note         String?
  id           String        @id @default(uuid())
  lastEdit     DateTime      @updatedAt
  deleted      Boolean       @default(false)
  transactions Transaction[]
  user         User          @relation(fields: [userID], references: [id])
  userID       String

  @@index([userID])
}

enum DebtType {
  DEBT
  CREDIT
}

model Debt {
  type         DebtType
  iconResource String?
  iconColor    String?
  iconName     String?
  description  String?
  date         DateTime
  wallet       Wallet        @relation(fields: [walletID], references: [id])
  walletID     String
  note         String
  money        Float
  archived     Boolean       @default(false)
  id           String        @id @default(uuid())
  lastEdit     DateTime      @updatedAt
  deleted      Boolean       @default(false)
  transaction  Transaction[]
  user         User          @relation(fields: [userID], references: [id])
  userID       String

  @@index([userID])
}

enum TransactionDirection {
  EXPENSE
  INCOME
}

enum TransactionType {
  TRANSACTION
  TRANSFER
  DEBT
  UNKNOWN
  MODEL
}

model Transaction {
  money                  Float
  date                   DateTime
  description            String
  category               Category              @relation(fields: [categoryID], references: [id])
  categoryID             String
  direction              TransactionDirection
  type                   TransactionType
  wallet                 Wallet                @relation(fields: [walletID], references: [id])
  walletID               String
  place                  Place?                @relation(fields: [placeID], references: [id])
  placeID                String?
  note                   String?
  event                  Event?                @relation(fields: [eventID], references: [id])
  eventID                String?
  confirmed              Boolean               @default(true)
  countInTotal           Boolean               @default(true)
  id                     String                @id @default(uuid())
  lastEdit               DateTime              @updatedAt
  deleted                Boolean               @default(false)
  debt                   Debt?                 @relation(fields: [debtID], references: [id])
  debtID                 String?
  recurrence             RecurrentTransaction? @relation(fields: [recurrentTransactionID], references: [id])
  recurrentTransactionID String?
  people                 Person[]
  transferFrom           Transfer?             @relation("TransferFromTransaction")
  transferTo             Transfer?             @relation("TransferToTransaction")

  @@index([walletID, date])
}

model RecurrentTransaction {
  money          Float
  description    String
  category       String
  direction      TransactionDirection
  wallet         Wallet               @relation(fields: [walletID], references: [id])
  walletID       String
  note           String?
  confirmed      Boolean              @default(true)
  countInTotal   Boolean              @default(true)
  startDate      DateTime
  lastOccurrence DateTime
  nextOccurrence DateTime
  rule           String
  id             String               @id @default(uuid())
  transactions   Transaction[]
  lastEdit       DateTime             @updatedAt
  deleted        Boolean              @default(false)

  @@index([walletID])
}

model TransactionModel {
  money        Float
  description  String
  category     String // TODO: Change to Category and there should be default system categories
  direction    TransactionDirection
  wallet       Wallet               @relation(fields: [walletID], references: [id])
  walletID     String
  note         String?
  confirmed    Boolean              @default(true)
  countInTotal Boolean              @default(true)
  id           String               @id @default(uuid())
  lastEdit     DateTime             @updatedAt
  deleted      Boolean              @default(false)

  @@index([walletID])
}

model Transfer {
  description  String
  date         DateTime
  from         Transaction @relation("TransferFromTransaction", fields: [fromID], references: [id])
  fromID       String      @unique
  to           Transaction @relation("TransferToTransaction", fields: [toID], references: [id])
  toID         String      @unique
  note         String
  confirmed    Boolean     @default(true)
  countInTotal Boolean     @default(true)
  id           String      @id @default(uuid())
  lastEdit     DateTime    @updatedAt
  deleted      Boolean     @default(false)

  @@index([fromID, toID])
}

model TransferModel {
  description  String
  note         String
  confirmed    Boolean  @default(true)
  countInTotal Boolean  @default(true)
  from         Wallet   @relation("TransactionModelFromWallet", fields: [fromID], references: [id])
  fromID       String
  to           Wallet   @relation("TransactionModelToWallet", fields: [toID], references: [id])
  toID         String
  fromMoney    Float
  toMoney      Float
  taxMoney     Float    @default(0)
  id           String   @id @default(uuid())
  lastEdit     DateTime @updatedAt
  deleted      Boolean  @default(false)

  @@index([fromID, toID])
}
